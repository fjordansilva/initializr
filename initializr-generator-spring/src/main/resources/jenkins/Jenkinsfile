#!groovy
// ****************************************
//      JENKINSFILE FOR BUHLER PROJECT
// ****************************************

properties([[$class: 'BuildDiscarderProperty',
    strategy: [$class: 'LogRotator',
    artifactDaysToKeepStr: '',
    artifactNumToKeepStr: '',
    daysToKeepStr: '',
    numToKeepStr: '50']]])

// Application Properties
def sia = 'bhl'
def irn = 'IRN-70829'
def organization = 'rsie';
def target = 'DEV';
def docker_registry
def deployStackScript
def app_name = 'buhler-bridge'
def GIT_COMMIT_HASH = "${env.BUILD_NUMBER}"

def nodeName = 'docker_sandbox'

switch ( target ) {
    case "DEV":
        docker_registry = 's2144tds.mc2.renault.fr:5000'
        deployStackScript = 'deployStack'
        nodeName = 'docker_sandbox'
        break;

    case "RE7":
        docker_registry = 'sfc-registry.lha.renault.fr:5000'
        deployStackScript = 'deployStackSFC'
        nodeName = 'docker_deploy_intra'
        break

    case "OPE":
        docker_registry = 'sfc-registry.lha.renault.fr:5000'
        deployStackScript = 'deployStackSFC'
        nodeName = 'docker_deploy_ops'
        break
}

// Scripted Jenkins pipeline
// dedicated node use node('<node_name>')
// https://confluence.dt.renault.com/display/DEV/Docker+Pipeline+-+WIP#DockerPipeline-WIP-ProcessDescriptionThroughtheJenkinsfile-Part1:Build&Deploy
// Node name            Env     Build   Deploy           Git
// docker_deploy_intra	Intra	Yes	    DEV, RE7, OPE	 No
// docker_deploy_ops	OPS	    Yes	    RE7, OPE	     No
// docker_sandbox	    Intra	Yes	    DEV	             Yes

node(nodeName) {
    def app;

    echo "Running on node ${nodeName}"

    // Ensure maven is available
    if ( target == 'DEV' || target == 'RE7' || target == 'OPE' ) {
        stage('Initialization') {
            echo "Initialization of pipeline"
            echo "Running build #${env.BUILD_ID} on ${env.JENKINS_URL}"
            ensureMvn()
        }
    }

    // Checkout source code from the repository
    if ( target == 'DEV' || target == 'RE7' || target == 'OPE' ) {
        stage('Clone Repository') {
            checkout scm
            GIT_COMMIT_HASH = sh (script: "git log -n 1 --pretty=format:'%H'", returnStdout: true)
        }
    }

    // Test
    if ( target == 'DEV' || target == 'RE7' || target == 'OPE' ) {
        stage('Test') {
            echo "Branch name: ${env.BRANCH_NAME}"
            // if (env.BRANCH_NAME == 'master') {
            mvnTest()
            echo "Test executed Successfully"
            // }
        }
    }

    // Build and create the package
    if ( target == 'DEV' || target == 'RE7' || target == 'OPE' ) {
        stage('Build & Package - tests skipped') {
            // if (env.BRANCH_NAME == 'master') {
                mvnPackage()
                echo "Application Built Successfully"
            // }
        }
    }

    // Quality check: Sonar
    if ( target == 'DEV' || target == 'RE7' || target == 'OPE' ) {
        stage('Source code analysis') {
            sonar()
            echo "Source code analysis completed"
        }
    }

    // Build docker image
    if ( target == 'DEV' || target == 'RE7' || target == 'OPE' ) {
        stage('Build Docker Image') {
            app = docker.build("${organization}/${app_name}", "-f Dockerfile .")
        }
    }

    // Push image to registry
    if ( target == 'DEV' || target == 'RE7' || target == 'OPE' ) {
        stage('Push Docker Image') {
            docker.withRegistry('http://${docker_registry}') {
                app.push("${GIT_COMMIT_HASH}")
                app.push()
            }
        }
    }
}

// node('docker-checker') {
//    sh '''
//        echo "***********  Check image and push to DTR **********"
//        # --to=ope: push to INTRANET  docker trust registry (DTR)
//        # --to=ops: push to OPENSTACK docker trust registry (DTR)
//        check_image --sia="${sia}" --from=dev --to=dev  --image="${organization}/${app_name}:${GIT_COMMIT_HASH}"
//    '''
// }

//---------------------------------------------------------
// Maven command
//---------------------------------------------------------
def ensureMvn() {
    env.PATH = "${tool 'M3'}/bin:${env.PATH}"
}

def mvnTest() {
     sh "mvn -B clean test"
}

def mvnPackage() {
     sh "mvn -B package -Dmaven.test.skip=true"
}

//---------------------------------------------------------
// Sonar command
//---------------------------------------------------------
def sonar() {
    configFileProvider([configFile(fileId: 'faa778d7-3c59-44a8-a018-211b7faba481', variable: 'MAVEN_SETTINGS_XML')]) {
        sh "mvn -B -s $MAVEN_SETTINGS_XML sonar:sonar"
    }
}
